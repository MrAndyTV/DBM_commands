{
  "name": "reload",
  "permissions": "NONE",
  "restriction": "4",
  "_id": "EiHKM",
  "actions": [
    {
      "info": "0",
      "infoIndex": "1",
      "storage": "1",
      "varName": "cmdname",
      "name": "Store Command Params"
    },
    {
      "code": "const fs = require('fs');\nconst path = require('path');  \n\nconst commandName = tempVars(\"cmdname\");\n\nconst filePath = path.join(process.cwd(), 'data', 'commands.json');\nconst filePath2 = path.join(process.cwd(), 'data', 'events.json');\n\n(()=>{\n   \n   if(fs.existsSync(filePath2)){\n\n      let content = fs.readFileSync(filePath2)  \n      try {\n         if(typeof content !== 'string' && content.toString) content = content.toString();\n         Files.data.events = JSON.parse(Files.decrypt(content));\n      } catch(e) {\n         console.error(e)\n         return;\n      }\n   }\n\n  \n   if(fs.existsSync(filePath)){\n   \n      let content = fs.readFileSync(filePath)  \n      let data;\n      try {\n         if(typeof content !== 'string' && content.toString) content = content.toString();\n         data = JSON.parse(Files.decrypt(content));\n      } catch(e) {\n         console.error(e)\n         return;\n      }\n       \n      if(commandName ===  undefined) return msg.channel.send(`\n      **LuckyTarget's Command Reloader**    \n      \n      Please type either a partial name or a complete name of a command to reload that particular command.\n\n      If you put '*****' as the command name, it will reload ALL commands AND events from the data files.\n\n      If you put '**commands**' as the command name, it will reload ALL commands from the data files.\n\n      If you put '**events**' as the command name, it will reload ALL events from the data files.\n         \n      New command aliases will be added, old ones will not be removed\n      `)\n  \n      function reloadEvents(){\n         msg.channel.send(`Attempting to Reload ${Files.data.events.length} Events...`)\n\n         for(const event of client.eventNames()) {  \n            client.removeAllListeners(event);  \n         }\n\n         Bot.$evts = {}; \n\n         Bot.setupBot();\n         Bot.reformatEvents();\n         Bot.initEvents();\n\n         if(Bot.$evts[\"3\"]) {\n            Events.setupIntervals(bot);\n         }\n      }\n\n      function reloadCommands(){\n         msg.channel.send(`Attempting to Reload ${data.length} Commands...`)\n\n         Files.data.commands = data;\n\n         Bot.$cmds = {}; \n         Bot.$icds = []; \n         Bot.$regx = []; \n         Bot.$anym = [];\n      \n         Bot.reformatCommands();\n      }\n\n      if(commandName === \"*\"){\n\n         try {\n            reloadCommands();\n            reloadEvents();           \n         } catch (error) {\n            console.error(error)\n            return msg.channel.send(`There was a problem reloading everything.`); \n         }\n\n         return msg.channel.send(`All Bot Data Reloaded!`); \n      } \n\n      if(commandName === \"events\"){\n         try {\n            reloadEvents();\n         } catch (error) {\n            console.error(error)\n            return msg.channel.send(`There was a problem reloading all events`); \n         }\n\n         return msg.channel.send(`All ${Files.data.events.length} Events Reloaded!`); \n      }\n      if(commandName === \"commands\"){\n      \n         try {\n            reloadCommands();\n         } catch (error) {\n            console.error(error)\n            return msg.channel.send(`There was a problem reloading all commands!`); \n         }\n\n         return msg.channel.send(`All ${data.length} Commands Reloaded!`); \n      }\n\n\n\n      let found = data.filter(c=>c && c.name.indexOf(commandName) == 0)\n      \n      if(found.length === 0) return msg.channel.send(`The command '${commandName}' was not found.`); \n\n      if(found.length > 1) return msg.channel.send(`${found.length} results, did you mean: ${found.map(c=>c.name).join(\", \")}? Run command again.`)\n    \n         const com = data.find(c=>c && c.name === found[0].name)\n\n         Bot._caseSensitive = Boolean(Files.data.settings.case === 'true');  \n         if(com) {\n            switch(com.comType) {\n               case '1':\n                  delete Bot.$icds.find(c=>c && c.name === found)\n                  Bot.$icds.push(com);\n                  break;\n               case '2':\n                  delete Bot.$regx.find(c=>c && c.name === found)\n                  Bot.$regx.push(com);\n                  break;\n               case '3':\n                  delete Bot.$anym.find(c=>c && c.name === found)\n                  Bot.$anym.push(com);\n                  break;\n               default:\n                  if(Bot._caseSensitive) {\n                     Bot.$cmds[com.name] = com;\n                     if(com._aliases) {\n                        const aliases = com._aliases;\n                        for(let j = 0; j < aliases.length; j++) {\n                           Bot.$cmds[aliases[j]] = com;\n                        }\n                     }\n                  } else {\n                     Bot.$cmds[com.name.toLowerCase()] = com;\n                     if(com._aliases) {\n                        const aliases = com._aliases;\n                        for(let j = 0; j < aliases.length; j++) {\n                           Bot.$cmds[aliases[j].toLowerCase()] = com;\n                        }\n                     }\n                  }\n                  break;\n            }\n\n            msg.channel.send(`Command '${com.name}' Reloaded!`)\n         }\n      \n   }\n})();\n\n",
      "behavior": "0",
      "interpretation": "1",
      "storage": "0",
      "varName": "all_data",
      "VTypeSelect": "0",
      "CVTypeValue": "",
      "name": "Run Script"
    },
    {
      "behavior": "3",
      "name": "Run Action Sequence Once"
    }
  ],
  "comType": "0",
  "_aliases": [
    "r"
  ]
}
